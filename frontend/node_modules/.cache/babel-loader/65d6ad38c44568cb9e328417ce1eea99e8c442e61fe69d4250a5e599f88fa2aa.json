{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\todo-list-app\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [groupBy, setGroupBy] = useState('none');\n  useEffect(() => {\n    // Функция для загрузки списка задач при монтировании компонента\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks');\n        setTasks(response.data.tasks);\n      } catch (error) {\n        console.error('Ошибка при загрузке задач:', error.message);\n      }\n    };\n    fetchTasks(); // Вызываем функцию загрузки задач\n  }, []);\n\n  // Функция для определения цвета заголовка в зависимости от статуса задачи и даты завершения\n  const getHeaderColor = task => {\n    const today = new Date();\n    const dueDate = new Date(task.dueDate);\n    if (task.status === 'completed') {\n      return 'green'; // Зеленый цвет для завершенных задач\n    } else if (dueDate < today) {\n      return 'red'; // Красный цвет для просроченных задач\n    } else {\n      return 'grey'; // Серый цвет для остальных задач\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0437\\u0430\\u0434\\u0430\\u0447\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: getHeaderColor(task)\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442: \", task.priority]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F: \", task.dueDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0439: \", task.responsible]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", task.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"a8xxJ03rrmS7FcO87UQ3OvpoIuw=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","groupBy","setGroupBy","fetchTasks","response","get","data","error","console","message","getHeaderColor","task","today","Date","dueDate","status","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","color","title","priority","responsible","id","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/todo-list-app/frontend/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TaskList = () => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [groupBy, setGroupBy] = useState('none');\r\n\r\n    useEffect(() => {\r\n        // Функция для загрузки списка задач при монтировании компонента\r\n        const fetchTasks = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8000/tasks');\r\n                setTasks(response.data.tasks);\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке задач:', error.message);\r\n            }\r\n        };\r\n        fetchTasks(); // Вызываем функцию загрузки задач\r\n    }, []);\r\n\r\n    // Функция для определения цвета заголовка в зависимости от статуса задачи и даты завершения\r\n    const getHeaderColor = (task) => {\r\n        const today = new Date();\r\n        const dueDate = new Date(task.dueDate);\r\n        if (task.status === 'completed') {\r\n            return 'green'; // Зеленый цвет для завершенных задач\r\n        } else if (dueDate < today) {\r\n            return 'red'; // Красный цвет для просроченных задач\r\n        } else {\r\n            return 'grey'; // Серый цвет для остальных задач\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Список задач</h2>\r\n            {tasks.map((task) => (\r\n                <div key={task.id} style={{ color: getHeaderColor(task) }}>\r\n                    <h3>{task.title}</h3>\r\n                    <p>Приоритет: {task.priority}</p>\r\n                    <p>Дата окончания: {task.dueDate}</p>\r\n                    <p>Ответственный: {task.responsible}</p>\r\n                    <p>Статус: {task.status}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}