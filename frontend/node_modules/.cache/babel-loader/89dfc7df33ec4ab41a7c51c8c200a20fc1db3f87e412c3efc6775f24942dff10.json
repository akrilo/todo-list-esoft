{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\todo-list-app\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // Проверка, авторизован ли пользователь (можно добавить дополнительную логику)\n  const isAuthenticated = false; // Здесь должна быть логика для проверки авторизации пользователя\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        children: isAuthenticated ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 67\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/tasks\",\n        children: isAuthenticated ? /*#__PURE__*/_jsxDEV(TasksPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        from: \"/\",\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","BrowserRouter","Router","Switch","Route","Redirect","LoginPage","jsxDEV","_jsxDEV","App","isAuthenticated","children","path","to","fileName","_jsxFileName","lineNumber","columnNumber","TasksPage","from","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/todo-list-app/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\n\nconst App = () => {\n    // Проверка, авторизован ли пользователь (можно добавить дополнительную логику)\n    const isAuthenticated = false; // Здесь должна быть логика для проверки авторизации пользователя\n\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/login\">\n                    {isAuthenticated ? <Redirect to=\"/tasks\" /> : <LoginPage />}\n                </Route>\n                <Route path=\"/tasks\">\n                    {isAuthenticated ? <TasksPage /> : <Redirect to=\"/login\" />}\n                </Route>\n                <Redirect from=\"/\" to=\"/login\" />\n            </Switch>\n        </Router>\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,SAAS,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EACd;EACA,MAAMC,eAAe,GAAG,KAAK,CAAC,CAAC;;EAE/B,oBACIF,OAAA,CAACN,MAAM;IAAAS,QAAA,eACHH,OAAA,CAACL,MAAM;MAAAQ,QAAA,gBACHH,OAAA,CAACJ,KAAK;QAACQ,IAAI,EAAC,QAAQ;QAAAD,QAAA,EACfD,eAAe,gBAAGF,OAAA,CAACH,QAAQ;UAACQ,EAAE,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGT,OAAA,CAACF,SAAS;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACRT,OAAA,CAACJ,KAAK;QAACQ,IAAI,EAAC,QAAQ;QAAAD,QAAA,EACfD,eAAe,gBAAGF,OAAA,CAACU,SAAS;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGT,OAAA,CAACH,QAAQ;UAACQ,EAAE,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACRT,OAAA,CAACH,QAAQ;QAACc,IAAI,EAAC,GAAG;QAACN,EAAE,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEjB,CAAC;AAACG,EAAA,GAjBIX,GAAG;AAmBTT,QAAQ,CAACqB,MAAM,eAACb,OAAA,CAACC,GAAG;EAAAK,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEK,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}