{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\todo-list-app\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [groupBy, setGroupBy] = useState('none');\n  useEffect(() => {\n    // Функция для загрузки списка задач при монтировании компонента\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks');\n        setTasks(response.data.tasks);\n      } catch (error) {\n        console.error('Ошибка при загрузке задач:', error.message);\n      }\n    };\n    fetchTasks(); // Вызываем функцию загрузки задач\n  }, []);\n\n  // Функция для определения цвета заголовка в зависимости от статуса задачи и даты завершения\n  const getHeaderColor = task => {\n    const today = new Date();\n    const dueDate = new Date(task.dueDate);\n    if (task.status === 'completed') {\n      return 'green'; // Зеленый цвет для завершенных задач\n    } else if (dueDate < today) {\n      return 'red'; // Красный цвет для просроченных задач\n    } else {\n      return 'grey'; // Серый цвет для остальных задач\n    }\n  };\n\n  // Функция для сортировки задач по дате завершения\n  const sortByDueDate = (taskA, taskB) => {\n    const dateA = new Date(taskA.dueDate);\n    const dateB = new Date(taskB.dueDate);\n    return dateA - dateB;\n  };\n\n  // Функция для группировки задач по дате завершения\n  const groupTasksByDueDate = () => {\n    const today = new Date();\n    const nextWeek = new Date();\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    const todayTasks = tasks.filter(task => new Date(task.dueDate) <= today);\n    const nextWeekTasks = tasks.filter(task => new Date(task.dueDate) > today && new Date(task.dueDate) <= nextWeek);\n    const futureTasks = tasks.filter(task => new Date(task.dueDate) > nextWeek);\n    return {\n      today: todayTasks,\n      nextWeek: nextWeekTasks,\n      future: futureTasks\n    };\n  };\n\n  // Функция для отображения задач в зависимости от выбранной группировки\n  const renderTasks = () => {\n    switch (groupBy) {\n      case 'today':\n      case 'nextWeek':\n      case 'future':\n        const groupedTasks = groupTasksByDueDate();\n        return groupedTasks[groupBy].map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: getHeaderColor(task)\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442: \", task.priority]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F: \", task.dueDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0439: \", task.responsible]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", task.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this));\n      case 'responsible':\n        // Реализация группировки по ответственным\n        break;\n      default:\n        // Без группировки\n        return tasks.sort(sortByDueDate).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: getHeaderColor(task)\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442: \", task.priority]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F: \", task.dueDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0439: \", task.responsible]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", task.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0437\\u0430\\u0434\\u0430\\u0447\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: getHeaderColor(task)\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442: \", task.priority]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0414\\u0430\\u0442\\u0430 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F: \", task.dueDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0439: \", task.responsible]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0421\\u0442\\u0430\\u0442\\u0443\\u0441: \", task.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"a8xxJ03rrmS7FcO87UQ3OvpoIuw=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","groupBy","setGroupBy","fetchTasks","response","get","data","error","console","message","getHeaderColor","task","today","Date","dueDate","status","sortByDueDate","taskA","taskB","dateA","dateB","groupTasksByDueDate","nextWeek","setDate","getDate","todayTasks","filter","nextWeekTasks","futureTasks","future","renderTasks","groupedTasks","map","style","color","children","title","fileName","_jsxFileName","lineNumber","columnNumber","priority","responsible","id","sort","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/todo-list-app/frontend/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TaskList = () => {\r\n    const [tasks, setTasks] = useState([]);\r\n    const [groupBy, setGroupBy] = useState('none');\r\n\r\n    useEffect(() => {\r\n        // Функция для загрузки списка задач при монтировании компонента\r\n        const fetchTasks = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8000/tasks');\r\n                setTasks(response.data.tasks);\r\n            } catch (error) {\r\n                console.error('Ошибка при загрузке задач:', error.message);\r\n            }\r\n        };\r\n        fetchTasks(); // Вызываем функцию загрузки задач\r\n    }, []);\r\n\r\n    // Функция для определения цвета заголовка в зависимости от статуса задачи и даты завершения\r\n    const getHeaderColor = (task) => {\r\n        const today = new Date();\r\n        const dueDate = new Date(task.dueDate);\r\n        if (task.status === 'completed') {\r\n            return 'green'; // Зеленый цвет для завершенных задач\r\n        } else if (dueDate < today) {\r\n            return 'red'; // Красный цвет для просроченных задач\r\n        } else {\r\n            return 'grey'; // Серый цвет для остальных задач\r\n        }\r\n    };\r\n\r\n    // Функция для сортировки задач по дате завершения\r\n    const sortByDueDate = (taskA, taskB) => {\r\n        const dateA = new Date(taskA.dueDate);\r\n        const dateB = new Date(taskB.dueDate);\r\n        return dateA - dateB;\r\n    };\r\n\r\n    // Функция для группировки задач по дате завершения\r\n    const groupTasksByDueDate = () => {\r\n        const today = new Date();\r\n        const nextWeek = new Date();\r\n        nextWeek.setDate(nextWeek.getDate() + 7);\r\n        const todayTasks = tasks.filter((task) => new Date(task.dueDate) <= today);\r\n        const nextWeekTasks = tasks.filter((task) => new Date(task.dueDate) > today && new Date(task.dueDate) <= nextWeek);\r\n        const futureTasks = tasks.filter((task) => new Date(task.dueDate) > nextWeek);\r\n        return { today: todayTasks, nextWeek: nextWeekTasks, future: futureTasks };\r\n    };\r\n    \r\n// Функция для отображения задач в зависимости от выбранной группировки\r\nconst renderTasks = () => {\r\n    switch (groupBy) {\r\n        case 'today':\r\n        case 'nextWeek':\r\n        case 'future':\r\n            const groupedTasks = groupTasksByDueDate();\r\n            return groupedTasks[groupBy].map((task) => (\r\n                <div key={task.id} style={{ color: getHeaderColor(task) }}>\r\n                    <h3>{task.title}</h3>\r\n                    <p>Приоритет: {task.priority}</p>\r\n                    <p>Дата окончания: {task.dueDate}</p>\r\n                    <p>Ответственный: {task.responsible}</p>\r\n                    <p>Статус: {task.status}</p>\r\n                </div>\r\n            ));\r\n        case 'responsible':\r\n            // Реализация группировки по ответственным\r\n            break;\r\n        default:\r\n            // Без группировки\r\n            return tasks.sort(sortByDueDate).map((task) => (\r\n                <div key={task.id} style={{ color: getHeaderColor(task) }}>\r\n                    <h3>{task.title}</h3>\r\n                    <p>Приоритет: {task.priority}</p>\r\n                    <p>Дата окончания: {task.dueDate}</p>\r\n                    <p>Ответственный: {task.responsible}</p>\r\n                    <p>Статус: {task.status}</p>\r\n                </div>\r\n            ));\r\n    }\r\n};\r\n\r\n    return (\r\n        <div>\r\n            <h2>Список задач</h2>\r\n            {tasks.map((task) => (\r\n                <div key={task.id} style={{ color: getHeaderColor(task) }}>\r\n                    <h3>{task.title}</h3>\r\n                    <p>Приоритет: {task.priority}</p>\r\n                    <p>Дата окончания: {task.dueDate}</p>\r\n                    <p>Ответственный: {task.responsible}</p>\r\n                    <p>Статус: {task.status}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}